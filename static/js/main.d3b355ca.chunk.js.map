{"version":3,"sources":["Canvas/HeroCanvas.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HeroCanvas","props","imageCacheRef","useRef","canvasRef","imgRef","Image","requestAnimationFrameRef","useSpring","scrollTop","document","documentElement","scrollTopProps","setScrollTop","interpScale","interpolate","maxScrollTop","scrollHeight","window","innerHeight","scale","scrollFraction","frameIndex","Math","max","min","frameCount","floor","isNaN","current","requestAnimationFrame","updateImage","canvas","image","wrh","width","height","newWidth","newHeight","xOffset","yOffset","getContext","drawImage","handleScroll","useEffect","i","preloadImg","src","toString","padStart","onload","addEventListener","removeEventListener","cancelAnimationFrame","id","ref","style","transform","CanvasContainer","styled","div","App","className","zIndex","opacity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d3b355ca.chunk.js","sourcesContent":["import React, {useEffect, useRef} from 'react';\nimport {useSpring, animated, interpolate} from \"react-spring\";\nimport {easeOutQuart, easeOutCirc} from \"../utils/ease-functions\";\n\nconst currentFrame = (index:number):string => (\n  `https://www.apple.com/105/media/us/airpods-pro/2019/1299e2f5_9206_4470_b28e_08307a42f19b/anim/sequence/large/01-hero-lightpass/${index.toString().padStart(4, '0')}.jpg`\n)\n\nconst frameCount = 140;\nconst SCALE_MIN = 0.25;\nconst SCALE_MAX = 0.45;\n\nconst HeroCanvas = (props: any) => {\n  const imageCacheRef = useRef<Array<any>>([]);\n  const canvasRef = useRef<any>(null);\n  const imgRef = useRef<any>(new Image());\n  const requestAnimationFrameRef = useRef<number>(0);\n\n  const [scrollTopProps, setScrollTop] = useSpring(() => ({scrollTop: document.documentElement.scrollTop}));\n  const interpScale = scrollTopProps.scrollTop.interpolate(scrollTop => {\n    const maxScrollTop = document.documentElement.scrollHeight - window.innerHeight;\n    const scale = scrollTop / maxScrollTop * (SCALE_MIN - SCALE_MAX) + SCALE_MAX;\n    // canvas animation start\n    const scrollFraction = scrollTop / (maxScrollTop * 0.25);\n    const frameIndex = Math.max(1,\n      Math.min(\n        frameCount - 1,\n        Math.floor(scrollFraction * frameCount)\n      ));\n    if (!isNaN(frameIndex)) {\n      requestAnimationFrameRef.current = requestAnimationFrame(() => {\n        updateImage(canvasRef.current, imageCacheRef.current[frameIndex])\n      })\n    }\n    // canvas animation end\n    return `matrix(${scale},0,0,${scale},0,0)`});\n\n  const updateImage = (canvas: any, image: any) => {\n    var wrh = image.width / image.height;\n    var newWidth = canvas.width;\n    var newHeight = newWidth / wrh;\n    if (newHeight > canvas.height) {\n      newHeight = canvas.height;\n      newWidth = newHeight * wrh;\n    }\n    var xOffset = newWidth < canvas.width ? ((canvas.width - newWidth) / 2) : 0;\n    var yOffset = newHeight < canvas.height ? ((canvas.height - newHeight) / 2) : 0;\n    canvas.getContext('2d').drawImage(image, xOffset, yOffset, newWidth, newHeight);\n  }\n\n  const handleScroll = () => {\n    const scrollTop = document.documentElement.scrollTop;\n    setScrollTop({scrollTop});\n  }\n\n  useEffect(() => {\n    //preload images\n    //TODO: there must be a better way\n    for(let i = 0; i <= frameCount; i++) {\n      const preloadImg = new Image();\n      preloadImg.src = currentFrame(i);\n      imageCacheRef.current[i] = preloadImg;\n    }\n    const canvas = canvasRef.current;\n    if (canvas) {\n      canvas.width = 1458;\n      canvas.height = 820;\n      const context = canvas.getContext('2d');\n      imgRef.current = imageCacheRef.current[0];\n      imgRef.current.onload=function(){\n        updateImage(canvas, imgRef.current)\n      }\n      window.addEventListener('scroll', handleScroll)\n    }\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll)\n      window.cancelAnimationFrame(requestAnimationFrameRef.current);\n    }\n  }, [])\n  return (\n    <animated.canvas id=\"hero-lightpass\" width={1458} height={820} ref={canvasRef} style={{width: 1458, height: 820, transform: interpScale}}/>\n  );\n}\n\nexport default HeroCanvas;\n","import React, {useEffect} from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport HeroCanvas from \"./Canvas/HeroCanvas\";\n\nconst HERO_CANVAS_SCALE_MIN = 0.25;\nconst HERO_CANVAS_SCALE_MAX = 0.45;\n\nconst CanvasContainer = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n  width: 100%;\n`;\n\nfunction App() {\n  const handleScroll = () => {\n    const {scrollTop} = document.documentElement;\n    const maxScrollTop = (document.documentElement.scrollHeight - window.innerHeight)\n    // console.log(scrollTop)\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll)\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll)\n    }\n  }, [])\n  return (\n    <div className=\"scroll-sequence\">\n      <div className=\"sequence-container\">\n        <div className=\"canvas-sequence\">\n          <CanvasContainer>\n            <div style={{width: '1458px', height: 820, zIndex: 11,opacity: 1}}>\n              <HeroCanvas/>\n            </div>\n          </CanvasContainer>\n        </div>\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}